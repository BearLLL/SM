#Original:https://blog.csdn.net/weixin_42503645/article/details/112355373

// TXInput represents a transaction input
type TXInput struct {
  Txid      []byte //交易id
  Vout      int  // 输出的编号
  ScriptSig string //执行脚本
}
 
// TXOutput represents a transaction output
type TXOutput struct {
  Value        int //金额
  ScriptPubKey string //公钥
}
 
// Transaction represents a Bitcoin transaction
type Transaction struct {
  ID   []byte  //交易hash
  Vin  []TXInput //交易的输入 - 付款方
  Vout []TXOutput //交易的输出 - 收款方 
}

// Block keeps block headers
type Block struct {
  Timestamp     int64
  Transactions  []*Transaction
  PrevBlockHash []byte
  Hash          []byte
  Nonce         int
}

// HashTransactions returns a hash of the transactions in the block
func (b *Block) HashTransactions() []byte {
  var txHashes [][]byte
  var txHash [32]byte
  for _, tx := range b.Transactions {
    txHashes = append(txHashes, tx.ID)
  }
  txHash = sha256.Sum256(bytes.Join(txHashes, []byte{}))
 
  return txHash[:]
}

func (pow *ProofOfWork) prepareData(nonce int) []byte {
  data := bytes.Join(
    [][]byte{
      pow.block.PrevBlockHash,
      pow.block.HashTransactions(),
      IntToHex(pow.block.Timestamp),
      IntToHex(int64(targetBits)),
      IntToHex(int64(nonce)),
    },
    []byte{},
  )
  return data
}

// IsCoinbase checks whether the transaction is coinbase
func (tx Transaction) IsCoinbase() bool {
  return len(tx.Vin) == 1 && len(tx.Vin[0].Txid) == 0 && tx.Vin[0].Vout == -1
}

// CanUnlockOutputWith checks whether the address initiated the transaction
func (in *TXInput) CanUnlockOutputWith(unlockingData string) bool {
  return in.ScriptSig == unlockingData
}

// CanBeUnlockedWith checks if the output can be unlocked with the provided data
func (out *TXOutput) CanBeUnlockedWith(unlockingData string) bool {
  return out.ScriptPubKey == unlockingData
}

// NewCoinbaseTX creates a new coinbase transaction
func NewCoinbaseTX(to, data string) *Transaction {
  if data == "" {
    data = fmt.Sprintf("Reward to '%s'", to)
  }
  txin := TXInput{[]byte{}, -1, data}
  txout := TXOutput{subsidy, to}
  tx := Transaction{nil, []TXInput{txin}, []TXOutput{txout}}
  tx.SetID()
  return &tx
}

spentTXOs := make(map[string][]int)

if tx.IsCoinbase() == false {
   for _, in := range tx.Vin {
     if in.CanUnlockOutputWith(address) {
       inTxID := hex.EncodeToString(in.Txid)
       spentTXOs[inTxID] = append(spentTXOs[inTxID], in.Vout)
      }
    }
}

// FindUnspentTransactions returns a list of transactions containing unspent outputs
func (bc *Blockchain) FindUnspentTransactions(address string) []Transaction {
  var unspentTXs []Transaction
  spentTXOs := make(map[string][]int)
  bci := bc.Iterator()
 
  for {
    block := bci.Next()
 
    for _, tx := range block.Transactions {
      txID := hex.EncodeToString(tx.ID)
 
    Outputs:
      for outIdx, out := range tx.Vout {
        // Was the output spent?
        if spentTXOs[txID] != nil {
          for _, spentOut := range spentTXOs[txID] {
            if spentOut == outIdx {
              continue Outputs
            }
          }
        }
 
        if out.CanBeUnlockedWith(address) {
          unspentTXs = append(unspentTXs, *tx)
        }
      }
 
      if tx.IsCoinbase() == false {
        for _, in := range tx.Vin {
          if in.CanUnlockOutputWith(address) {
            inTxID := hex.EncodeToString(in.Txid)
            spentTXOs[inTxID] = append(spentTXOs[inTxID], in.Vout)
          }
        }
      }
    }
 
    if len(block.PrevBlockHash) == 0 {
      break
    }
  }
  
  return unspentTXs
}

// FindUTXO finds and returns all unspent transaction outputs
func (bc *Blockchain) FindUTXO(address string) []TXOutput {
  var UTXOs []TXOutput
  unspentTransactions := bc.FindUnspentTransactions(address)
 
  for _, tx := range unspentTransactions {
    for _, out := range tx.Vout {
      if out.CanBeUnlockedWith(address) {
        UTXOs = append(UTXOs, out)
      }
    }
  }
 
  return UTXOs
}

// FindSpendableOutputs finds and returns unspent outputs to reference in inputs
func (bc *Blockchain) FindSpendableOutputs(address string, amount int) (int, map[string][]int) {
  unspentOutputs := make(map[string][]int)
  unspentTXs := bc.FindUnspentTransactions(address)
  accumulated := 0
 
Work:
  for _, tx := range unspentTXs {
    txID := hex.EncodeToString(tx.ID)
 
    for outIdx, out := range tx.Vout {
      if out.CanBeUnlockedWith(address) && accumulated < amount {
        accumulated += out.Value
        unspentOutputs[txID] = append(unspentOutputs[txID], outIdx)
 
        if accumulated >= amount {
          break Work
        }
      }
    }
  }
 
  return accumulated, unspentOutputs
}

// NewUTXOTransaction creates a new transaction
func NewUTXOTransaction(from, to string, amount int, bc *Blockchain) *Transaction {
  var inputs []TXInput
  var outputs []TXOutput
 
  acc, validOutputs := bc.FindSpendableOutputs(from, amount)
 
  if acc < amount {
    log.Panic("ERROR: Not enough funds")
  }
 
  // Build a list of inputs
  for txid, outs := range validOutputs {
    txID, err := hex.DecodeString(txid)
    if err != nil {
      log.Panic(err)
    }
 
    for _, out := range outs {
      input := TXInput{txID, out, from}
      inputs = append(inputs, input)
    }
  }
 
  // Build a list of outputs
  outputs = append(outputs, TXOutput{amount, to})
  if acc > amount {
    outputs = append(outputs, TXOutput{acc - amount, from}) // a change
  }
 
  tx := Transaction{nil, inputs, outputs}
  tx.SetID()
 
  return &tx
}

cbtx := NewCoinbaseTX(address, genesisCoinbaseData)
genesis := NewGenesisBlock(cbtx)

// MineBlock mines a new block with the provided transactions
func (bc *Blockchain) MineBlock(transactions []*Transaction) {
  var lastHash []byte
 
  err := bc.db.View(func(tx *bolt.Tx) error {
    b := tx.Bucket([]byte(blocksBucket))
    lastHash = b.Get([]byte("l"))
 
    return nil
  })
 
  if err != nil {
    log.Panic(err)
  }
 
  newBlock := NewBlock(transactions, lastHash)
 
  err = bc.db.Update(func(tx *bolt.Tx) error {
    b := tx.Bucket([]byte(blocksBucket))
    err := b.Put(newBlock.Hash, newBlock.Serialize())
    if err != nil {
      log.Panic(err)
    }
 
    err = b.Put([]byte("l"), newBlock.Hash)
    if err != nil {
      log.Panic(err)
    }
 
    bc.tip = newBlock.Hash
 
    return nil
  })
}

func (cli *CLI) getBalance(address string) {
  bc := NewBlockchain(address)
  defer bc.db.Close()
 
  balance := 0
  UTXOs := bc.FindUTXO(address)
 
  for _, out := range UTXOs {
    balance += out.Value
  }
 
  fmt.Printf("Balance of '%s': %dn", address, balance)
}

func (cli *CLI) send(from, to string, amount int) {
  bc := NewBlockchain(from)
  defer bc.db.Close()
 
  tx := NewUTXOTransaction(from, to, amount, bc)
  bc.MineBlock([]*Transaction{tx})
  fmt.Println("Success!")
}

func (cli *CLI) printUsage() {
  fmt.Println("Usage:")
  fmt.Println("  getbalance -address ADDRESS - Get balance of ADDRESS")
  fmt.Println("  createblockchain -address ADDRESS - Create a blockchain and send genesis block reward to ADDRESS")
  fmt.Println("  printchain - Print all the blocks of the blockchain")
  fmt.Println("  send -from FROM -to TO -amount AMOUNT - Send AMOUNT of coins from FROM address to TO")
}


